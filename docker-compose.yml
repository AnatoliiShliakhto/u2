# Environment configurations
x-env-services: &env-services
  SERVICES_DB_CFG: >
    [
      { "database": "${ACCESS_DB_NAME:-core}", "user": "${ACCESS_DB_USER:-root}", "password": "${ACCESS_DB_PASS:-root}" },
      { "database": "${AUDIT_DB_NAME:-core}", "user": "${AUDIT_DB_USER:-root}", "password": "${AUDIT_DB_PASS:-root}" }
    ]

# Separate database environment anchors
x-env-database-defaults: &env-database-defaults
  DB_URL: ${DB_URL:-surrealdb:8000}
  DB_NAMESPACE: ${DB_NAMESPACE:-u2}

x-env-database-root: &env-database-root
  DB_USER: ${DB_ROOT_USER:-root}
  DB_PASS: ${DB_ROOT_PASS:-root}

x-env-database-access: &env-database-access
  DB_DATABASE: ${ACCESS_DB_NAME:-core}
  DB_USER: ${ACCESS_DB_USER:-root}
  DB_PASS: ${ACCESS_DB_PASS:-root}

x-env-database-audit: &env-database-audit
  DB_DATABASE: ${AUDIT_DB_NAME:-core}
  DB_USER: ${AUDIT_DB_USER:-root}
  DB_PASS: ${AUDIT_DB_PASS:-root}

x-env-surreal: &env-surreal
  SURREAL_USER: ${DB_ROOT_USER:-root}
  SURREAL_PASS: ${DB_ROOT_PASS:-root}
  SURREAL_PATH: rocksdb:/data

# Services environment anchors

x-env-rabbitmq: &env-rabbitmq
  RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-root}
  RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-root}
  RABBITMQ_VHOST: ${RABBITMQ_VHOST:-/}
  RABBITMQ_NODENAME: ${RABBITMQ_NODENAME:-rabbitmq}

x-env-grafana: &env-grafana
  GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-root}
  GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS:-root}
  GF_PATHS_PROVISIONING: /etc/grafana/provisioning
  GF_PLUGINS_PREINSTALL: grafana-surrealdb-datasource
  GF_DOMAIN: ${DOMAIN:-localhost}

x-env-amqp: &env-amqp
  AMQP_URL: amqp://${RABBITMQ_USER:-root}:${RABBITMQ_PASS:-root}@rabbitmq:5672/%2f

x-env-service-base: &env-service-base
  <<: [*env-amqp, *env-database-defaults]
  HOST_NAME: $(hostname)
  DATA_PATH: ${DATA_PATH:-/etc/u2}

x-env-access: &env-access
  JWT_SECRET: ${JWT_SECRET:-secret}
  JWT_ISSUER: ${JWT_ISSUER:-}
  JWT_SUBJECT: ${JWT_SUBJECT:-}
  JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION:-600}
  JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-1296000}
  JWT_DELETE_INTERVAL: ${JWT_DELETE_INTERVAL:-1800}
  JWT_SET_COOKIE: ${JWT_SET_COOKIE:-SameSite=Strict; HttpOnly; Secure;}

# Health check configurations
x-health-default: &health-default
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 30s

x-health-surreal: &health-surreal
  <<: *health-default
  test: ["CMD", "/surreal", "is-ready"]

x-health-prometheus: &health-prometheus
  <<: *health-default
  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]

x-health-rabbitmq: &health-rabbitmq
  <<: *health-default
  test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]

x-health-grafana: &health-grafana
  <<: *health-default
  test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]

x-health-service: &health-service
  <<: *health-default
  test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider 0.0.0.0/healthcheck || exit 1"]

# Common service configurations
x-alpine-service-base: &alpine-service-base
  image: alpine:latest
  networks: [intranet]
  security_opt: ["no-new-privileges:true"]
  restart: unless-stopped

x-microservice-config: &microservice-config
  <<: *alpine-service-base
  environment:
    <<: *env-service-base
  depends_on:
    rabbitmq: { condition: service_healthy }
    surrealdb: { condition: service_healthy }
    system-svc: { condition: service_started }
  healthcheck: *health-service

# === INFRASTRUCTURE ===

networks:
  intranet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  logs: { driver: local }
  surrealdb: { driver: local }
  prometheus: { driver: local }
  rabbitmq: { driver: local }
  grafana: { driver: local }

configs:
  rabbitmq-plugins:
    content: "[rabbitmq_management, rabbitmq_prometheus]."
  rabbitmq-erlang-cookie:
    content: ${RABBITMQ_COOKIE:-secret}

# === SERVICES ===

services:
  # Core Infrastructure
  surrealdb:
    container_name: surrealdb
    image: surrealdb/surrealdb:latest
    user: root
    networks: [intranet]
    ports: ["8000:8000"]
    environment: *env-surreal
    entrypoint: ["/surreal", "start"]
    volumes: ["surrealdb:/data"]
    security_opt: ["no-new-privileges:true"]
    restart: always
    healthcheck: *health-surreal

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    user: "65534:65534"
    ports: ["9090:9090"]
    networks: [intranet]
    volumes:
      - prometheus:/prometheus
      - ./cfg/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
      - --web.enable-lifecycle
    restart: unless-stopped
    security_opt: ["no-new-privileges:true"]
    healthcheck: *health-prometheus

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    networks: [intranet]
    ports: ["15672:15672"]
    environment: *env-rabbitmq
    volumes: ["rabbitmq:/var/lib/rabbitmq"]
    configs:
      - source: rabbitmq-plugins
        target: /etc/rabbitmq/enabled_plugins
      - source: rabbitmq-erlang-cookie
        target: /var/lib/rabbitmq/.erlang.cookie
        mode: 0400
    restart: unless-stopped
    security_opt: ["no-new-privileges:true"]
    healthcheck: *health-rabbitmq

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    user: "472:472"
    ports: ["3000:3000"]
    networks: [intranet]
    depends_on:
      prometheus: { condition: service_healthy }
    environment: *env-grafana
    volumes:
      - grafana:/var/lib/grafana
      - ./cfg/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./cfg/grafana/provisioning:/etc/grafana/provisioning
      - ./cfg/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    security_opt: ["no-new-privileges:true"]
    healthcheck: *health-grafana

  rdesktop:
    container_name: rdesktop
    image: lscr.io/linuxserver/rdesktop:ubuntu-xfce
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./cfg/rdesktop:/config
    ports: ["3380:3389"]
    networks: [intranet]
    devices: ["/dev/dri:/dev/dri"]
    shm_size: 1gb
    restart: unless-stopped
    security_opt: ["no-new-privileges:true"]

  # Microservices
  proxy-svc:
    <<: *alpine-service-base
    container_name: proxy-svc
    hostname: proxy
    ports: ["443:443"]
    volumes: ["./bin/proxy:/proxy:ro", "./cfg/certificates:/etc/ssl/private:ro"]
    entrypoint: ["/proxy"]
    environment:
      <<: *env-amqp
      SSL_CRT: /etc/ssl/private/cert.pem
      SSL_KEY: /etc/ssl/private/key.pem
      ACCESS_URL: http://access:80
    depends_on:
      access-svc: { condition: service_started }

  logger-svc:
    <<: *alpine-service-base
    container_name: logger-svc
    hostname: logger
    volumes:
      - ./bin/logger:/logger:ro
      - logs:/logs
    entrypoint: ["/logger"]
    environment:
      <<: *env-amqp
      LOGS_DIR: /logs
    depends_on:
      rabbitmq: { condition: service_healthy }

  system-svc:
    <<: *alpine-service-base
    container_name: system-svc
    hostname: system
    user: "1000:1000"
    environment:
      <<: [*env-service-base, *env-services, *env-database-root]
    volumes:
      - ./bin/system:/system:ro
    entrypoint: ["/system"]
    depends_on:
      rabbitmq: { condition: service_healthy }
      surrealdb: { condition: service_healthy }

  access-svc:
    <<: *microservice-config
    container_name: access-svc
    hostname: access
    user: "1000:1000"
    environment:
      <<: [*env-database-access, *env-access]
    volumes: ["./bin/access:/access:ro", "./cfg/access:/etc/u2:ro"]
    entrypoint: ["/access"]

  audit-svc:
    <<: *microservice-config
    container_name: audit-svc
    hostname: audit
    user: "1000:1000"
    environment:
      <<: *env-database-audit
    volumes: ["./bin/audit:/audit:ro", "./cfg/audit:/etc/u2:ro"]
    entrypoint: ["/audit"]